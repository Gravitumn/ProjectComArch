  lw  0   1   n
        lw  0   2   r
        lw  0   5   stack
        lw  0   7   endAddr
		
combination beq 1   2   if_r_eq_0_or_n_eq_r	case n==r
        beq 2   0   if_r_eq_0_or_n_eq_r	if case==0 
        lw  0   6   neg1	$0 = -1
        add 1   6   1		n = n-1
        lw  0   6   pos1	$0 = 1
        sw  5   7   stack	store $7 into stack
        add 5   6   5		increment stack
        sw  5   1   stack	store $1 into stack
        add 5   6   5		increment stack
        sw  5   2   stack	store $2 into stack
        add 5   6   5		increment stack
        lw  0   6   comAddr set function call combination
        jalr 6  7			call combinationnation(n-1,r)
        add 3   0   4		$3 = $4, save value
        lw  0   6   pos1	$6 = 1
        sw  5   4   stack	store $4 into stack
        lw  0   6   neg1	$6 = -1
        add 5   6   5		decrement stack
        lw  5   2   stack	restore $2 from stack
        add 5   6   5		decrement stack
        lw  5   1   stack	restore $1 from stack
        add 2   6   2		r = r-1
        lw  0   6   pos1	$6 = 1
        add 5   6   5		increment stack
        add 5   6   5		increment stack
        add 5   6   5 		increment stack
        lw  0   6   comAddr		set function call combination
        jalr 6  7			call combination(n-1,r-1)
        lw  0   6   neg1	$6 = -1
        add 5   6   5		decrement stack
        lw  5   4   stack	restore $4 from stack
        add 3   4   3		$3 = $3 + $4
        add 5   6   5		decrement stack
        add 5   6   5		decrement stack
        add 5   6   5		decrement stack
        lw  5   7   stack	restore $7 from stack
        jalr 7  6			return $3
end halt
if_r_eq_0_or_n_eq_r  lw  0   6   pos1	if (r==0 || n==r) $6 = 1
        add 0   6   3
        jalr    7   6		return 1
		
n       .fill   7
r       .fill   3
pos1    .fill    1
neg1    .fill   -1
comAddr .fill   combination
endAddr .fill   end
stack   .fill   0
